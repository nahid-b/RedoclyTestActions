components:
  schemas:
    EventSubscriptionResponse:
      type: object
      properties:
        tokenName:
          pattern: ^[A-Za-z0-9 ]{1,100}
          description: Name of the token
          type: string
          maxLength: 100
          minLength: 0
        subscriptionDetails:
          $ref: '#/components/schemas/EventSubscriptionResponseDetails'
        location:
          $ref: '#/components/schemas/Location'
        type:
          pattern: ^[A-Za-z ]{1,30}
          description: Type of event
          type: string
          maxLength: 30
          minLength: 0
      additionalProperties: false
    InternalServerErrorSchema:
      type: object
      properties:
        path:
          pattern: ^[\S\s]{1,300}$
          type: string
          maxLength: 300
          minLength: 0
        error:
          pattern: ^[\S\s]{1,300}$
          type: string
          maxLength: 300
          minLength: 0
        message:
          pattern: ^[\S\s]{1,300}$
          type: string
          maxLength: 300
          minLength: 0
        timestamp:
          format: date-time
          type: string
        status:
          format: int32
          type: integer
      additionalProperties: false
    EventSubscriptionRequestSchema:
      type: object
      additionalProperties: false
    ErrorResponseMessage:
      type: object
      properties:
        code:
          format: int32
          type: integer
        errorMessageExtraDetails:
          type: object
        subCode:
          format: int32
          type: integer
        logTraceId:
          type: string
        type:
          type: string
        title:
          type: string
        message:
          type: string
      additionalProperties: false
    EventSubscriptionResponseDetails:
      type: object
      properties:
        subscriptionId:
          pattern: ^[a-z0-9-]{1,24}$
          type: string
          maxLength: 24
          minLength: 0
        callbackUrl:
          pattern: ^http[\S\s]{1,300}$
          type: string
          maxLength: 300
          minLength: 0
        createdDate:
          type: string
      additionalProperties: false
    ErrorList:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        errorCount:
          format: int32
          type: integer
      additionalProperties: false
    Error:
      type: object
      properties:
        code:
          format: int32
          maximum: 30
          type: integer
          minimum: 0
        message:
          pattern: ^[\S\s]{1,300}$
          type: string
          maxLength: 300
          minLength: 0
        service:
          pattern: ^[\S\s]{1,50}$
          type: string
          maxLength: 50
          minLength: 0
        timestamp:
          format: int64
          type: integer
      additionalProperties: false
    Location:
      description: Unique reference to the ledger on a particular ledger network (optionally accessed from a particular node)
      additionalProperties: false
      type: object
      required:
        - network
        - technology
      properties:
        technology:
          pattern: ^[A-Za-z ]{1,30}
          description: The technology used by the desired network
          type: string
          maxLength: 30
          minLength: 0
        network:
          pattern: ^[A-Za-z ]{1,30}
          description: The network that the ledger resides on
          type: string
          maxLength: 30
          minLength: 0
servers:
  - url: https://api.overledger.staging.quantnetwork.net
openapi: 3.0.1
paths:
  /v2/tokenise/tokens/subscription/qrc20/credit:
    post:
      summary: Receive updates each time there is a credit payment on your account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSubscriptionRequestSchema'
            examples:
              Subscribe To QRC20 Create Credit Event:
                summary: Subscribe To QRC20 Create Credit Event
                description: Subscribe To QRC20 Create Credit Event
                value:
                  location:
                    technology: Ethereum
                    network: Ethereum Goerli Testnet
                  callbackUrl: https://eo2vmypzncjgeoi.m.pipedream.net
                  type: Create Credit
                  requestDetails:
                    tokenUnit: QNTNS
        required: true
      description: Set up a subscription to receive updates to a callback URL each time there is a credit on a QRC20 token.
      operationId: subscribeCreditEvent
      responses:
        '200':
          description: All good!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSubscriptionResponse'
              examples:
                Create Credit:
                  description: Create Credit
                  value:
                    tokenName: QNTNS
                    subscriptionDetails:
                      subscriptionId: 62e8f146953593727a20b4b8
                      callbackUrl: https://eo2vmypzncjgeoi.m.pipedream.net
                      createdDate: '2022-06-15T09:51:04.551+00:00'
                    location:
                      technology: ethereum
                      network: Ethereum Goerli Testnet
                    type: Create Credit
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseMessage'
              examples:
                Bad Request:
                  description: Bad Request
                  value:
                    code: 400
                    type: Invalid-Request-Body
                    title: Request body is invalid
                    message: 'The request body sent in your API call was not what we were expecting. It is either incorrect or does not include all of the required objects/fields. The following field is missing or null: requestDetails.tokenName'
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
              examples:
                Bad Request:
                  description: Bad Request
                  value:
                    errors:
                      - message: Not authorised for the access to the endpoint!
                        code: 401
                    errorCount: 1
        '500':
          description: Something went wrong on our side
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorSchema'
              examples:
                500 Something went wrong on our side:
                  description: 500 Something went wrong on our side
                  value:
                    path: /v2/webhook/subscription/61406222b65cf749ea893c1a
                    error: Internal Server Error
                    message: No message available
                    timestamp: '1646908272'
                    status: 500
      parameters:
        - schema:
            pattern: ^Bearer [A-Za-z0-9\-_. ]{1,5010}$
            type: string
            maxLength: 5010
            minLength: 0
          name: Authorization
          in: header
          required: true
      tags:
        - Subscribe to QRC20 account credit payments
info:
  description: Quant’s Overledger API allows developers to create applications for multiple DLT’s using a single standard set of operations and data structures.In order to maintain the security of private keys, most operations have two steps – prepare and execute. The prepare step is the point at which all arguments are specified and standardised payloads are sent. Overledger converts this standard payload into a DLT-specific transaction object. In the execute step, the SDK signs the transaction object that Overledger created and submits it to Overledger to perform the operation
  x-logo:
    url: https://developer.quant.network/images/quant_logo_white.png
  title: Quant Overledger API
  version: '2.0'
